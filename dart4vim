#!/bin/bash
#
# Vim is Charityware.  dart.vim syntax is Charityware.
# 
# (c) Copyright 2019 by Eugene Ciurana / pr3d4t0r.  Licensed under the
# standard VIM LICENSE - Vim command :help uganda.txt for details.
#
# Project:  https://github.com/pr3d4t0r/dart-vim-syntax


DART_SYNTAX_PROJECT="https://github.com/pr3d4t0r/dart-vim-syntax.git"
TMP_DIR=$(mktemp -d 2> /dev/null || mktemp -d -t 'dart')  # MacOS and Linux:
USER_VIM="$HOME/.vim"
VIM_DOCS="$USER_VIM/doc"
VIM_FILE_DETECTION="$USER_VIM/ftdetect"
VIM_FORK_PATH="../vim"
VIM_SYNTAX="$USER_VIM/syntax"


function die {
    if [[ -z "$2" ]]
    then
        exitCode=99
    else
        exitCode="$2"
    fi

    echo "$1"
    exit "$exitCode"
} # die


function assertVimDirExists {
    [[ ! -d "$HOME/.vim" ]] && die "$HOME/.vim directory missing; create it to continue" 1
} # assertVimDirExists


function assertGitInstalled {
    [[ -z $(which git) ]] && die "git command not found on this system" 2
} # assertGitInstalled


function setup {
    rm -Rf "$TMP_DIR"
    mkdir -p "$TMP_DIR"
} # setup


function cloneProject {
    git clone "$DART_SYNTAX_PROJECT" "$TMP_DIR"
} # cloneProject


function _cleanCopy {
    local file="$1"

    local sourceFile="$2/$file"
    local targetFile="$3/$file"

    # Always overrides - no check?  Suggestions?
    rm -vf "$targetFile"
    cp -vf "$sourceFile" "$targetFile"
} # _cleanCopy


function installSyntaxFiles {
    
    local originDocs="$TMP_DIR/doc"
    local originFileDetection="$TMP_DIR/ftdetect"
    local originSyntax="$TMP_DIR/syntax"

    _cleanCopy dart.txt "$originDocs" "$VIM_DOCS"
    _cleanCopy dart.vim "$originFileDetection" "$VIM_FILE_DETECTION"
    _cleanCopy dart.vim "$originSyntax" "$VIM_SYNTAX"
} # installSyntaxFiles


function notify {
    printf "\nDart Vim syntax files INSTALLED in $USER_VIM\n\n"

    [[ -n $(which tree) ]] && tree -L 2 -I "autoload*|snippets*|include*|lib*|nerdtree*|*plugin*" -P "dart.*" "$USER_VIM"
} # notify

function cleanUp {
    rm -Rf "$TMP_DIR"
} # cleanUp


function install {
    assertGitInstalled
    setup
    cloneProject
    installSyntaxFiles
    notify
    cleanUp
} # install


function remove {
    local detectionFile="$VIM_FILE_DETECTION/dart.vim"
    local docFile="$VIM_DOCS/dart.txt"
    local syntaxFile="$VIM_SYNTAX/dart.vim"

    if [[ -e "$syntaxFile" ]]
    then
        notify
        rm -f "$detectionFile" 2> /dev/null || die "$detectionFile exists but unable to delete it" 4
        rm -f "$docFile" 2> /dev/null || die "$docFile exists but unable to delete it" 5
        rm -f "$syntaxFile" 2> /dev/null || die "$syntaxFile exists but unable to delete it" 3

        printf "\nDart Vim syntax files REMOVED from $USER_VIM\n"
        [[ -n $(which tree) ]] && tree -L 2 -I "autoload*|snippets*|include*|lib*|nerdtree*|*plugin*" -P "dart.*" "$USER_VIM"
    fi
} # remove


function helpUser {
    cat <<"EOF"
syntax:  dart4vim command

    where command is one of:

    install - fetch te latest stable version from GitHub and install
    publish - copy the Dart syntax files to ../vim/* target directories
    quick   - copy the Dart syntax files from this project and install
    remove  - remove the Dart syntax files from $HOME/.vim

EOF
    exit 0
} # helpUser


function assertSyntaxDevInPWD {
    local currentDir=$(pwd)

    [[ -e "$currentDir/syntax/dart.vim" ]] || die "$currentDir does not contain Dart syntax files" 6
} # assertSyntaxDevInPWD


function quickInstall {
    assertSyntaxDevInPWD
    _cleanCopy dart.txt ./doc "$VIM_DOCS"
    _cleanCopy dart.vim ./ftdetect "$VIM_FILE_DETECTION"
    _cleanCopy dart.vim ./syntax "$VIM_SYNTAX"

    notify
} # quickInstall


function publish {
    local forkedVimSyntaxDir="$VIM_FORK_PATH/runtime/syntax"
    local forkedVimFileTypeFile="$VIM_FORK_PATH/runtime/filetype.vim"

    assertSyntaxDevInPWD

    [[ -d "$VIM_FORK_PATH" ]] || die "$VIM_FORK_PATH directory is not present - fork and check out Vim" 7
    [[ -d "$forkedVimSyntaxDir" ]] || die "$forkedVimSyntaxDir directory is not present - do you have the right Vim fork?" 8
    [[ -e "$forkedVimFileTypeFile" ]] || die "$forkedVimFileTypeFile file not found - is Vim forked?" 9

    _cleanCopy "dart.vim" ./syntax "$forkedVimSyntaxDir"
    echo "dart.vim published to forked Vim at $VIM_FORK_PATH"
} # publish


# *** main ***

assertVimDirExists

case "$1" in
    "install")
        install
        ;;
    "publish")
        publish
        ;;
    "quick")
        quickInstall
        ;;
    "remove")
        remove
        ;;
    *)
        helpUser
        ;;
esac
exit 0

